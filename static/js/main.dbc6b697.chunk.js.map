{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","onFormSubmit","preventDefault","handleSubmit","state","initialState","_this$state","onSubmit","type","onChange","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbc6b697.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst TableHeader = () => {\n\treturn (\n\t\t<thead>\n\t      <tr>\n\t        <th>Name</th>\n\t        <th>Job</th>\n\t      </tr>\n\t    </thead>\n\t);\n}\n\nconst TableBody = (props) => {\n\n\tconst rows = props.characterData.map((row, index) => {\n\t\treturn (\n\t\t\t<tr key={index}>\n\t\t       <td>{row.name}</td>\n\t\t       <td>{row.job}</td>\n\t\t       <td>\n\t\t       \t<button onClick={() => props.removeCharacter(index)}>Delete</button>\n\t\t       </td>\n\t\t    </tr>\n\t\t);\n\t})\n\n\treturn <tbody>{rows}</tbody>;\n\n\t// return (\n\t// \t<tbody>\n\t//       <tr>\n\t//         <td>Charlie</td>\n\t//         <td>Janitor</td>\n\t//       </tr>\n\t//       <tr>\n\t//         <td>Mac</td>\n\t//         <td>Bouncer</td>\n\t//       </tr>\n\t//       <tr>\n\t//         <td>Dee</td>\n\t//         <td>Aspiring actress</td>\n\t//       </tr>\n\t//       <tr>\n\t//         <td>Dennis</td>\n\t//         <td>Bartender111</td>\n\t//       </tr>\n\t//     </tbody>\n\t// );\n\n}\nclass Table extends Component {\n    render() {\n\n    \tconst {characterData, removeCharacter} = this.props;\n        return (\n\t\t    <table>\n\t\t       <TableHeader />\n\t\t       <TableBody characterData = {characterData} removeCharacter={removeCharacter} />\n\t\t  \t</table>\n        )\n    }\n}\n\nexport default Table","import React, { Component } from 'react';\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.initialState = {\n            name: '',\n            job: ''\n        };\n\n        this.state = this.initialState;\n    };\n\n    handleChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({\n            [name]: value\n        });\n\n    };\n\n\n\n    onFormSubmit = (event) => {\n        event.preventDefault();\n\n        this.props.handleSubmit(this.state);\n        this.setState(this.initialState);\n    };\n\n    render() {\n        const { name, job } = this.state;\n\n        return (\n            <form onSubmit={this.onFormSubmit}>\n                <label>Name</label>\n                <input \n                    type=\"text\" \n                    name=\"name\" \n                    value={name} \n                    onChange={this.handleChange} />\n                <label>Job</label>\n                <input \n                    type=\"text\" \n                    name=\"job\" \n                    value={job} \n                    onChange={this.handleChange} />\n                <button type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends Component {\n    state = {\n        characters: [{\n                name: 'Charlie',\n                job: 'Janitor',\n            },\n            {\n                name: 'Mac',\n                job: 'Bouncer',\n            },\n            {\n                name: 'Dee',\n                job: 'Aspring actress',\n            },\n            {\n                name: 'Dennis',\n                job: 'Bartende22r',\n            },\n        ]\n    };\n\n    removeCharacter = index => {\n        const { characters } = this.state;\n\n        this.setState({\n            characters: characters.filter((character, i) => {\n                return i !== index\n            })\n        });\n\n    };\n\n    handleSubmit = character => {\n      this.setState({\n        characters: [...this.state.characters, character]\n      });\n    };\n\n    render() {\n\n        const { characters } = this.state;\n        \n\n        return (\n            // <div className=\"App\">\n            //   <h1>Hello, React!</h1>\n            // </div>\n            <div className=\"container\">\n              <Table characterData = {characters} removeCharacter={this.removeCharacter}/>\n              <Form handleSubmit={this.handleSubmit}/>\n            </div>\n        )\n    }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}